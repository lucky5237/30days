//
// This is a generated file, do not edit!
// Generated by R.swift, see https://github.com/mac-cain13/R.swift
//

import Foundation
import Rswift
import UIKit

/// This `R` struct is generated and contains references to static resources.
struct R: Rswift.Validatable {
  fileprivate static let applicationLocale = hostingBundle.preferredLocalizations.first.flatMap { Locale(identifier: $0) } ?? Locale.current
  fileprivate static let hostingBundle = Bundle(for: R.Class.self)

  /// Find first language and bundle for which the table exists
  fileprivate static func localeBundle(tableName: String, preferredLanguages: [String]) -> (Foundation.Locale, Foundation.Bundle)? {
    // Filter preferredLanguages to localizations, use first locale
    var languages = preferredLanguages
      .map { Locale(identifier: $0) }
      .prefix(1)
      .flatMap { locale -> [String] in
        if hostingBundle.localizations.contains(locale.identifier) {
          if let language = locale.languageCode, hostingBundle.localizations.contains(language) {
            return [locale.identifier, language]
          } else {
            return [locale.identifier]
          }
        } else if let language = locale.languageCode, hostingBundle.localizations.contains(language) {
          return [language]
        } else {
          return []
        }
      }

    // If there's no languages, use development language as backstop
    if languages.isEmpty {
      if let developmentLocalization = hostingBundle.developmentLocalization {
        languages = [developmentLocalization]
      }
    } else {
      // Insert Base as second item (between locale identifier and languageCode)
      languages.insert("Base", at: 1)

      // Add development language as backstop
      if let developmentLocalization = hostingBundle.developmentLocalization {
        languages.append(developmentLocalization)
      }
    }

    // Find first language for which table exists
    // Note: key might not exist in chosen language (in that case, key will be shown)
    for language in languages {
      if let lproj = hostingBundle.url(forResource: language, withExtension: "lproj"),
         let lbundle = Bundle(url: lproj)
      {
        let strings = lbundle.url(forResource: tableName, withExtension: "strings")
        let stringsdict = lbundle.url(forResource: tableName, withExtension: "stringsdict")

        if strings != nil || stringsdict != nil {
          return (Locale(identifier: language), lbundle)
        }
      }
    }

    // If table is available in main bundle, don't look for localized resources
    let strings = hostingBundle.url(forResource: tableName, withExtension: "strings", subdirectory: nil, localization: nil)
    let stringsdict = hostingBundle.url(forResource: tableName, withExtension: "stringsdict", subdirectory: nil, localization: nil)

    if strings != nil || stringsdict != nil {
      return (applicationLocale, hostingBundle)
    }

    // If table is not found for requested languages, key will be shown
    return nil
  }

  /// Load string from Info.plist file
  fileprivate static func infoPlistString(path: [String], key: String) -> String? {
    var dict = hostingBundle.infoDictionary
    for step in path {
      guard let obj = dict?[step] as? [String: Any] else { return nil }
      dict = obj
    }
    return dict?[key] as? String
  }

  static func validate() throws {
    try intern.validate()
  }

  #if os(iOS) || os(tvOS)
  /// This `R.storyboard` struct is generated, and contains static references to 2 storyboards.
  struct storyboard {
    /// Storyboard `LaunchScreen`.
    static let launchScreen = _R.storyboard.launchScreen()
    /// Storyboard `Main`.
    static let main = _R.storyboard.main()

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "LaunchScreen", bundle: ...)`
    static func launchScreen(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.launchScreen)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "Main", bundle: ...)`
    static func main(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.main)
    }
    #endif

    fileprivate init() {}
  }
  #endif

  /// This `R.entitlements` struct is generated, and contains static references to 1 properties.
  struct entitlements {
    static let apsEnvironment = infoPlistString(path: [], key: "aps-environment") ?? "development"

    fileprivate init() {}
  }

  /// This `R.file` struct is generated, and contains static references to 33 files.
  struct file {
    /// Resource file `IMUIAssets.bundle`.
    static let imuiAssetsBundle = Rswift.FileResource(bundle: R.hostingBundle, name: "IMUIAssets", pathExtension: "bundle")
    /// Resource file `IMUIInputViewAssets.bundle`.
    static let imuiInputViewAssetsBundle = Rswift.FileResource(bundle: R.hostingBundle, name: "IMUIInputViewAssets", pathExtension: "bundle")
    /// Resource file `defoult_header.png`.
    static let defoult_headerPng = Rswift.FileResource(bundle: R.hostingBundle, name: "defoult_header", pathExtension: "png")
    /// Resource file `defoult_header@2x.png`.
    static let defoult_header2xPng = Rswift.FileResource(bundle: R.hostingBundle, name: "defoult_header@2x", pathExtension: "png")
    /// Resource file `defoult_header@3x.png`.
    static let defoult_header3xPng = Rswift.FileResource(bundle: R.hostingBundle, name: "defoult_header@3x", pathExtension: "png")
    /// Resource file `inComing_bubble.png`.
    static let inComing_bubblePng = Rswift.FileResource(bundle: R.hostingBundle, name: "inComing_bubble", pathExtension: "png")
    /// Resource file `inComing_bubble@2x.png`.
    static let inComing_bubble2xPng = Rswift.FileResource(bundle: R.hostingBundle, name: "inComing_bubble@2x", pathExtension: "png")
    /// Resource file `inComing_bubble@3x.png`.
    static let inComing_bubble3xPng = Rswift.FileResource(bundle: R.hostingBundle, name: "inComing_bubble@3x", pathExtension: "png")
    /// Resource file `incoming_voice_1.png`.
    static let incoming_voice_1Png = Rswift.FileResource(bundle: R.hostingBundle, name: "incoming_voice_1", pathExtension: "png")
    /// Resource file `incoming_voice_1@2x.png`.
    static let incoming_voice_12xPng = Rswift.FileResource(bundle: R.hostingBundle, name: "incoming_voice_1@2x", pathExtension: "png")
    /// Resource file `incoming_voice_1@3x.png`.
    static let incoming_voice_13xPng = Rswift.FileResource(bundle: R.hostingBundle, name: "incoming_voice_1@3x", pathExtension: "png")
    /// Resource file `incoming_voice_2.png`.
    static let incoming_voice_2Png = Rswift.FileResource(bundle: R.hostingBundle, name: "incoming_voice_2", pathExtension: "png")
    /// Resource file `incoming_voice_2@2x.png`.
    static let incoming_voice_22xPng = Rswift.FileResource(bundle: R.hostingBundle, name: "incoming_voice_2@2x", pathExtension: "png")
    /// Resource file `incoming_voice_2@3x.png`.
    static let incoming_voice_23xPng = Rswift.FileResource(bundle: R.hostingBundle, name: "incoming_voice_2@3x", pathExtension: "png")
    /// Resource file `incoming_voice_3.png`.
    static let incoming_voice_3Png = Rswift.FileResource(bundle: R.hostingBundle, name: "incoming_voice_3", pathExtension: "png")
    /// Resource file `incoming_voice_3@2x.png`.
    static let incoming_voice_32xPng = Rswift.FileResource(bundle: R.hostingBundle, name: "incoming_voice_3@2x", pathExtension: "png")
    /// Resource file `incoming_voice_3@3x.png`.
    static let incoming_voice_33xPng = Rswift.FileResource(bundle: R.hostingBundle, name: "incoming_voice_3@3x", pathExtension: "png")
    /// Resource file `login_01@2x.png`.
    static let login_012xPng = Rswift.FileResource(bundle: R.hostingBundle, name: "login_01@2x", pathExtension: "png")
    /// Resource file `login_01@3x.png`.
    static let login_013xPng = Rswift.FileResource(bundle: R.hostingBundle, name: "login_01@3x", pathExtension: "png")
    /// Resource file `login_02@2x.png`.
    static let login_022xPng = Rswift.FileResource(bundle: R.hostingBundle, name: "login_02@2x", pathExtension: "png")
    /// Resource file `login_02@3x.png`.
    static let login_023xPng = Rswift.FileResource(bundle: R.hostingBundle, name: "login_02@3x", pathExtension: "png")
    /// Resource file `outGoing_bubble.png`.
    static let outGoing_bubblePng = Rswift.FileResource(bundle: R.hostingBundle, name: "outGoing_bubble", pathExtension: "png")
    /// Resource file `outGoing_bubble@2x.png`.
    static let outGoing_bubble2xPng = Rswift.FileResource(bundle: R.hostingBundle, name: "outGoing_bubble@2x", pathExtension: "png")
    /// Resource file `outGoing_bubble@3x.png`.
    static let outGoing_bubble3xPng = Rswift.FileResource(bundle: R.hostingBundle, name: "outGoing_bubble@3x", pathExtension: "png")
    /// Resource file `outgoing_voice_1.png`.
    static let outgoing_voice_1Png = Rswift.FileResource(bundle: R.hostingBundle, name: "outgoing_voice_1", pathExtension: "png")
    /// Resource file `outgoing_voice_1@2x.png`.
    static let outgoing_voice_12xPng = Rswift.FileResource(bundle: R.hostingBundle, name: "outgoing_voice_1@2x", pathExtension: "png")
    /// Resource file `outgoing_voice_1@3x.png`.
    static let outgoing_voice_13xPng = Rswift.FileResource(bundle: R.hostingBundle, name: "outgoing_voice_1@3x", pathExtension: "png")
    /// Resource file `outgoing_voice_2.png`.
    static let outgoing_voice_2Png = Rswift.FileResource(bundle: R.hostingBundle, name: "outgoing_voice_2", pathExtension: "png")
    /// Resource file `outgoing_voice_2@2x.png`.
    static let outgoing_voice_22xPng = Rswift.FileResource(bundle: R.hostingBundle, name: "outgoing_voice_2@2x", pathExtension: "png")
    /// Resource file `outgoing_voice_2@3x.png`.
    static let outgoing_voice_23xPng = Rswift.FileResource(bundle: R.hostingBundle, name: "outgoing_voice_2@3x", pathExtension: "png")
    /// Resource file `outgoing_voice_3.png`.
    static let outgoing_voice_3Png = Rswift.FileResource(bundle: R.hostingBundle, name: "outgoing_voice_3", pathExtension: "png")
    /// Resource file `outgoing_voice_3@2x.png`.
    static let outgoing_voice_32xPng = Rswift.FileResource(bundle: R.hostingBundle, name: "outgoing_voice_3@2x", pathExtension: "png")
    /// Resource file `outgoing_voice_3@3x.png`.
    static let outgoing_voice_33xPng = Rswift.FileResource(bundle: R.hostingBundle, name: "outgoing_voice_3@3x", pathExtension: "png")

    /// `bundle.url(forResource: "IMUIAssets", withExtension: "bundle")`
    static func imuiAssetsBundle(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.imuiAssetsBundle
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "IMUIInputViewAssets", withExtension: "bundle")`
    static func imuiInputViewAssetsBundle(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.imuiInputViewAssetsBundle
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "defoult_header", withExtension: "png")`
    static func defoult_headerPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.defoult_headerPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "defoult_header@2x", withExtension: "png")`
    static func defoult_header2xPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.defoult_header2xPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "defoult_header@3x", withExtension: "png")`
    static func defoult_header3xPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.defoult_header3xPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "inComing_bubble", withExtension: "png")`
    static func inComing_bubblePng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.inComing_bubblePng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "inComing_bubble@2x", withExtension: "png")`
    static func inComing_bubble2xPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.inComing_bubble2xPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "inComing_bubble@3x", withExtension: "png")`
    static func inComing_bubble3xPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.inComing_bubble3xPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "incoming_voice_1", withExtension: "png")`
    static func incoming_voice_1Png(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.incoming_voice_1Png
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "incoming_voice_1@2x", withExtension: "png")`
    static func incoming_voice_12xPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.incoming_voice_12xPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "incoming_voice_1@3x", withExtension: "png")`
    static func incoming_voice_13xPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.incoming_voice_13xPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "incoming_voice_2", withExtension: "png")`
    static func incoming_voice_2Png(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.incoming_voice_2Png
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "incoming_voice_2@2x", withExtension: "png")`
    static func incoming_voice_22xPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.incoming_voice_22xPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "incoming_voice_2@3x", withExtension: "png")`
    static func incoming_voice_23xPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.incoming_voice_23xPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "incoming_voice_3", withExtension: "png")`
    static func incoming_voice_3Png(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.incoming_voice_3Png
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "incoming_voice_3@2x", withExtension: "png")`
    static func incoming_voice_32xPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.incoming_voice_32xPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "incoming_voice_3@3x", withExtension: "png")`
    static func incoming_voice_33xPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.incoming_voice_33xPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "login_01@2x", withExtension: "png")`
    static func login_012xPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.login_012xPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "login_01@3x", withExtension: "png")`
    static func login_013xPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.login_013xPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "login_02@2x", withExtension: "png")`
    static func login_022xPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.login_022xPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "login_02@3x", withExtension: "png")`
    static func login_023xPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.login_023xPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "outGoing_bubble", withExtension: "png")`
    static func outGoing_bubblePng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.outGoing_bubblePng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "outGoing_bubble@2x", withExtension: "png")`
    static func outGoing_bubble2xPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.outGoing_bubble2xPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "outGoing_bubble@3x", withExtension: "png")`
    static func outGoing_bubble3xPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.outGoing_bubble3xPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "outgoing_voice_1", withExtension: "png")`
    static func outgoing_voice_1Png(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.outgoing_voice_1Png
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "outgoing_voice_1@2x", withExtension: "png")`
    static func outgoing_voice_12xPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.outgoing_voice_12xPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "outgoing_voice_1@3x", withExtension: "png")`
    static func outgoing_voice_13xPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.outgoing_voice_13xPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "outgoing_voice_2", withExtension: "png")`
    static func outgoing_voice_2Png(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.outgoing_voice_2Png
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "outgoing_voice_2@2x", withExtension: "png")`
    static func outgoing_voice_22xPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.outgoing_voice_22xPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "outgoing_voice_2@3x", withExtension: "png")`
    static func outgoing_voice_23xPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.outgoing_voice_23xPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "outgoing_voice_3", withExtension: "png")`
    static func outgoing_voice_3Png(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.outgoing_voice_3Png
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "outgoing_voice_3@2x", withExtension: "png")`
    static func outgoing_voice_32xPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.outgoing_voice_32xPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "outgoing_voice_3@3x", withExtension: "png")`
    static func outgoing_voice_33xPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.outgoing_voice_33xPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    fileprivate init() {}
  }

  /// This `R.image` struct is generated, and contains static references to 33 images.
  struct image {
    /// Image `back`.
    static let back = Rswift.ImageResource(bundle: R.hostingBundle, name: "back")
    /// Image `defoult_header`.
    static let defoult_header = Rswift.ImageResource(bundle: R.hostingBundle, name: "defoult_header")
    /// Image `favor_1`.
    static let favor_1 = Rswift.ImageResource(bundle: R.hostingBundle, name: "favor_1")
    /// Image `favor`.
    static let favor = Rswift.ImageResource(bundle: R.hostingBundle, name: "favor")
    /// Image `find_1`.
    static let find_1 = Rswift.ImageResource(bundle: R.hostingBundle, name: "find_1")
    /// Image `find`.
    static let find = Rswift.ImageResource(bundle: R.hostingBundle, name: "find")
    /// Image `home_1`.
    static let home_1 = Rswift.ImageResource(bundle: R.hostingBundle, name: "home_1")
    /// Image `home`.
    static let home = Rswift.ImageResource(bundle: R.hostingBundle, name: "home")
    /// Image `icon_chat`.
    static let icon_chat = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_chat")
    /// Image `icon_more`.
    static let icon_more = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_more")
    /// Image `icon_praise`.
    static let icon_praise = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_praise")
    /// Image `icon_praised`.
    static let icon_praised = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_praised")
    /// Image `icon`.
    static let icon = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon")
    /// Image `inComing_bubble`.
    static let inComing_bubble = Rswift.ImageResource(bundle: R.hostingBundle, name: "inComing_bubble")
    /// Image `incoming_voice_1`.
    static let incoming_voice_1 = Rswift.ImageResource(bundle: R.hostingBundle, name: "incoming_voice_1")
    /// Image `incoming_voice_2`.
    static let incoming_voice_2 = Rswift.ImageResource(bundle: R.hostingBundle, name: "incoming_voice_2")
    /// Image `incoming_voice_3`.
    static let incoming_voice_3 = Rswift.ImageResource(bundle: R.hostingBundle, name: "incoming_voice_3")
    /// Image `login_01`.
    static let login_01 = Rswift.ImageResource(bundle: R.hostingBundle, name: "login_01")
    /// Image `login_02`.
    static let login_02 = Rswift.ImageResource(bundle: R.hostingBundle, name: "login_02")
    /// Image `logo`.
    static let logo = Rswift.ImageResource(bundle: R.hostingBundle, name: "logo")
    /// Image `me_1`.
    static let me_1 = Rswift.ImageResource(bundle: R.hostingBundle, name: "me_1")
    /// Image `me`.
    static let me = Rswift.ImageResource(bundle: R.hostingBundle, name: "me")
    /// Image `message_1`.
    static let message_1 = Rswift.ImageResource(bundle: R.hostingBundle, name: "message_1")
    /// Image `message`.
    static let message = Rswift.ImageResource(bundle: R.hostingBundle, name: "message")
    /// Image `outGoing_bubble`.
    static let outGoing_bubble = Rswift.ImageResource(bundle: R.hostingBundle, name: "outGoing_bubble")
    /// Image `outgoing_voice_1`.
    static let outgoing_voice_1 = Rswift.ImageResource(bundle: R.hostingBundle, name: "outgoing_voice_1")
    /// Image `outgoing_voice_2`.
    static let outgoing_voice_2 = Rswift.ImageResource(bundle: R.hostingBundle, name: "outgoing_voice_2")
    /// Image `outgoing_voice_3`.
    static let outgoing_voice_3 = Rswift.ImageResource(bundle: R.hostingBundle, name: "outgoing_voice_3")
    /// Image `不喜欢`.
    static let 不喜欢 = Rswift.ImageResource(bundle: R.hostingBundle, name: "不喜欢")
    /// Image `喜欢`.
    static let 喜欢 = Rswift.ImageResource(bundle: R.hostingBundle, name: "喜欢")
    /// Image `未选中`.
    static let 未选中 = Rswift.ImageResource(bundle: R.hostingBundle, name: "未选中")
    /// Image `添加照片`.
    static let 添加照片 = Rswift.ImageResource(bundle: R.hostingBundle, name: "添加照片")
    /// Image `选中`.
    static let 选中 = Rswift.ImageResource(bundle: R.hostingBundle, name: "选中")

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "back", bundle: ..., traitCollection: ...)`
    static func back(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.back, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "defoult_header", bundle: ..., traitCollection: ...)`
    static func defoult_header(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.defoult_header, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "favor", bundle: ..., traitCollection: ...)`
    static func favor(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.favor, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "favor_1", bundle: ..., traitCollection: ...)`
    static func favor_1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.favor_1, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "find", bundle: ..., traitCollection: ...)`
    static func find(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.find, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "find_1", bundle: ..., traitCollection: ...)`
    static func find_1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.find_1, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "home", bundle: ..., traitCollection: ...)`
    static func home(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.home, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "home_1", bundle: ..., traitCollection: ...)`
    static func home_1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.home_1, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon", bundle: ..., traitCollection: ...)`
    static func icon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_chat", bundle: ..., traitCollection: ...)`
    static func icon_chat(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_chat, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_more", bundle: ..., traitCollection: ...)`
    static func icon_more(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_more, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_praise", bundle: ..., traitCollection: ...)`
    static func icon_praise(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_praise, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_praised", bundle: ..., traitCollection: ...)`
    static func icon_praised(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_praised, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "inComing_bubble", bundle: ..., traitCollection: ...)`
    static func inComing_bubble(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.inComing_bubble, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "incoming_voice_1", bundle: ..., traitCollection: ...)`
    static func incoming_voice_1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.incoming_voice_1, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "incoming_voice_2", bundle: ..., traitCollection: ...)`
    static func incoming_voice_2(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.incoming_voice_2, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "incoming_voice_3", bundle: ..., traitCollection: ...)`
    static func incoming_voice_3(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.incoming_voice_3, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "login_01", bundle: ..., traitCollection: ...)`
    static func login_01(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.login_01, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "login_02", bundle: ..., traitCollection: ...)`
    static func login_02(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.login_02, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "logo", bundle: ..., traitCollection: ...)`
    static func logo(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.logo, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "me", bundle: ..., traitCollection: ...)`
    static func me(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.me, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "me_1", bundle: ..., traitCollection: ...)`
    static func me_1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.me_1, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "message", bundle: ..., traitCollection: ...)`
    static func message(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.message, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "message_1", bundle: ..., traitCollection: ...)`
    static func message_1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.message_1, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "outGoing_bubble", bundle: ..., traitCollection: ...)`
    static func outGoing_bubble(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.outGoing_bubble, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "outgoing_voice_1", bundle: ..., traitCollection: ...)`
    static func outgoing_voice_1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.outgoing_voice_1, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "outgoing_voice_2", bundle: ..., traitCollection: ...)`
    static func outgoing_voice_2(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.outgoing_voice_2, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "outgoing_voice_3", bundle: ..., traitCollection: ...)`
    static func outgoing_voice_3(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.outgoing_voice_3, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "不喜欢", bundle: ..., traitCollection: ...)`
    static func 不喜欢(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.不喜欢, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "喜欢", bundle: ..., traitCollection: ...)`
    static func 喜欢(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.喜欢, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "未选中", bundle: ..., traitCollection: ...)`
    static func 未选中(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.未选中, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "添加照片", bundle: ..., traitCollection: ...)`
    static func 添加照片(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.添加照片, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "选中", bundle: ..., traitCollection: ...)`
    static func 选中(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.选中, compatibleWith: traitCollection)
    }
    #endif

    fileprivate init() {}
  }

  /// This `R.nib` struct is generated, and contains static references to 14 nibs.
  struct nib {
    /// Nib `ChatViewController`.
    static let chatViewController = _R.nib._ChatViewController()
    /// Nib `IMUICameraCell`.
    static let imuiCameraCell = _R.nib._IMUICameraCell()
    /// Nib `IMUICameraView`.
    static let imuiCameraView = _R.nib._IMUICameraView()
    /// Nib `IMUICustomInputView`.
    static let imuiCustomInputView = _R.nib._IMUICustomInputView()
    /// Nib `IMUIEmojiCell`.
    static let imuiEmojiCell = _R.nib._IMUIEmojiCell()
    /// Nib `IMUIEmojiItemCell`.
    static let imuiEmojiItemCell = _R.nib._IMUIEmojiItemCell()
    /// Nib `IMUIFeatureListIconCell`.
    static let imuiFeatureListIconCell = _R.nib._IMUIFeatureListIconCell()
    /// Nib `IMUIFeatureListView`.
    static let imuiFeatureListView = _R.nib._IMUIFeatureListView()
    /// Nib `IMUIFeatureView`.
    static let imuiFeatureView = _R.nib._IMUIFeatureView()
    /// Nib `IMUIGalleryCell`.
    static let imuiGalleryCell = _R.nib._IMUIGalleryCell()
    /// Nib `IMUIGalleryContainerCell`.
    static let imuiGalleryContainerCell = _R.nib._IMUIGalleryContainerCell()
    /// Nib `IMUIMessageCollectionView`.
    static let imuiMessageCollectionView = _R.nib._IMUIMessageCollectionView()
    /// Nib `IMUIPermissionDenyedView`.
    static let imuiPermissionDenyedView = _R.nib._IMUIPermissionDenyedView()
    /// Nib `IMUIRecordVoiceCell`.
    static let imuiRecordVoiceCell = _R.nib._IMUIRecordVoiceCell()

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "ChatViewController", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.chatViewController) instead")
    static func chatViewController(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.chatViewController)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "IMUICameraCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.imuiCameraCell) instead")
    static func imuiCameraCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.imuiCameraCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "IMUICameraView", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.imuiCameraView) instead")
    static func imuiCameraView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.imuiCameraView)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "IMUICustomInputView", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.imuiCustomInputView) instead")
    static func imuiCustomInputView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.imuiCustomInputView)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "IMUIEmojiCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.imuiEmojiCell) instead")
    static func imuiEmojiCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.imuiEmojiCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "IMUIEmojiItemCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.imuiEmojiItemCell) instead")
    static func imuiEmojiItemCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.imuiEmojiItemCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "IMUIFeatureListIconCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.imuiFeatureListIconCell) instead")
    static func imuiFeatureListIconCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.imuiFeatureListIconCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "IMUIFeatureListView", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.imuiFeatureListView) instead")
    static func imuiFeatureListView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.imuiFeatureListView)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "IMUIFeatureView", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.imuiFeatureView) instead")
    static func imuiFeatureView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.imuiFeatureView)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "IMUIGalleryCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.imuiGalleryCell) instead")
    static func imuiGalleryCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.imuiGalleryCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "IMUIGalleryContainerCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.imuiGalleryContainerCell) instead")
    static func imuiGalleryContainerCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.imuiGalleryContainerCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "IMUIMessageCollectionView", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.imuiMessageCollectionView) instead")
    static func imuiMessageCollectionView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.imuiMessageCollectionView)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "IMUIPermissionDenyedView", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.imuiPermissionDenyedView) instead")
    static func imuiPermissionDenyedView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.imuiPermissionDenyedView)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "IMUIRecordVoiceCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.imuiRecordVoiceCell) instead")
    static func imuiRecordVoiceCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.imuiRecordVoiceCell)
    }
    #endif

    static func chatViewController(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.chatViewController.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    static func imuiCameraCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> IMUICameraCell? {
      return R.nib.imuiCameraCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? IMUICameraCell
    }

    static func imuiCameraView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.imuiCameraView.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    static func imuiCustomInputView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.imuiCustomInputView.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    static func imuiEmojiCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> IMUIEmojiCell? {
      return R.nib.imuiEmojiCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? IMUIEmojiCell
    }

    static func imuiEmojiItemCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> IMUIEmojiItemCell? {
      return R.nib.imuiEmojiItemCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? IMUIEmojiItemCell
    }

    static func imuiFeatureListIconCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> IMUIFeatureListIconCell? {
      return R.nib.imuiFeatureListIconCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? IMUIFeatureListIconCell
    }

    static func imuiFeatureListView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.imuiFeatureListView.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    static func imuiFeatureView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.imuiFeatureView.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    static func imuiGalleryCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> IMUIGalleryCell? {
      return R.nib.imuiGalleryCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? IMUIGalleryCell
    }

    static func imuiGalleryContainerCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> IMUIGalleryContainerCell? {
      return R.nib.imuiGalleryContainerCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? IMUIGalleryContainerCell
    }

    static func imuiMessageCollectionView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.imuiMessageCollectionView.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    static func imuiPermissionDenyedView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.imuiPermissionDenyedView.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    static func imuiRecordVoiceCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> IMUIRecordVoiceCell? {
      return R.nib.imuiRecordVoiceCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? IMUIRecordVoiceCell
    }

    fileprivate init() {}
  }

  fileprivate struct intern: Rswift.Validatable {
    fileprivate static func validate() throws {
      try _R.validate()
    }

    fileprivate init() {}
  }

  fileprivate class Class {}

  fileprivate init() {}
}

struct _R: Rswift.Validatable {
  static func validate() throws {
    #if os(iOS) || os(tvOS)
    try nib.validate()
    #endif
    #if os(iOS) || os(tvOS)
    try storyboard.validate()
    #endif
  }

  #if os(iOS) || os(tvOS)
  struct nib: Rswift.Validatable {
    static func validate() throws {
      try _IMUICameraCell.validate()
      try _IMUICameraView.validate()
      try _IMUIGalleryCell.validate()
      try _IMUIRecordVoiceCell.validate()
    }

    struct _ChatViewController: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "ChatViewController"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      fileprivate init() {}
    }

    struct _IMUICameraCell: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "IMUICameraCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> IMUICameraCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? IMUICameraCell
      }

      static func validate() throws {
        if UIKit.UIImage(named: "IMUIAssets.bundle/image/camera_fullscreen_Btn.png", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'IMUIAssets.bundle/image/camera_fullscreen_Btn.png' is used in nib 'IMUICameraCell', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    struct _IMUICameraView: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "IMUICameraView"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      static func validate() throws {
        if UIKit.UIImage(named: "IMUIAssets.bundle/image/camera_fullscreen_Btn.png", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'IMUIAssets.bundle/image/camera_fullscreen_Btn.png' is used in nib 'IMUICameraView', but couldn't be loaded.") }
        if UIKit.UIImage(named: "IMUIAssets.bundle/image/camera_recordVD_big_btn.png", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'IMUIAssets.bundle/image/camera_recordVD_big_btn.png' is used in nib 'IMUICameraView', but couldn't be loaded.") }
        if UIKit.UIImage(named: "IMUIAssets.bundle/image/camera_recordVD_btn.png", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'IMUIAssets.bundle/image/camera_recordVD_btn.png' is used in nib 'IMUICameraView', but couldn't be loaded.") }
        if UIKit.UIImage(named: "IMUIAssets.bundle/image/camera_send_message_btn.png", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'IMUIAssets.bundle/image/camera_send_message_btn.png' is used in nib 'IMUICameraView', but couldn't be loaded.") }
        if UIKit.UIImage(named: "IMUIAssets.bundle/image/camera_shrink_screen_Btn.png", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'IMUIAssets.bundle/image/camera_shrink_screen_Btn.png' is used in nib 'IMUICameraView', but couldn't be loaded.") }
        if UIKit.UIImage(named: "IMUIAssets.bundle/image/switch_camera_btn.png", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'IMUIAssets.bundle/image/switch_camera_btn.png' is used in nib 'IMUICameraView', but couldn't be loaded.") }
        if UIKit.UIImage(named: "IMUIAssets.bundle/image/switch_camera_photo_btn.png", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'IMUIAssets.bundle/image/switch_camera_photo_btn.png' is used in nib 'IMUICameraView', but couldn't be loaded.") }
        if UIKit.UIImage(named: "IMUIAssets.bundle/image/video_record_btn_to_play.png", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'IMUIAssets.bundle/image/video_record_btn_to_play.png' is used in nib 'IMUICameraView', but couldn't be loaded.") }
        if UIKit.UIImage(named: "IMUIAssets.bundle/image/video_record_btn_to_stop.png", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'IMUIAssets.bundle/image/video_record_btn_to_stop.png' is used in nib 'IMUICameraView', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    struct _IMUICustomInputView: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "IMUICustomInputView"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      fileprivate init() {}
    }

    struct _IMUIEmojiCell: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "IMUIEmojiCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> IMUIEmojiCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? IMUIEmojiCell
      }

      fileprivate init() {}
    }

    struct _IMUIEmojiItemCell: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "IMUIEmojiItemCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> IMUIEmojiItemCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? IMUIEmojiItemCell
      }

      fileprivate init() {}
    }

    struct _IMUIFeatureListIconCell: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "IMUIFeatureListIconCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> IMUIFeatureListIconCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? IMUIFeatureListIconCell
      }

      fileprivate init() {}
    }

    struct _IMUIFeatureListView: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "IMUIFeatureListView"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      fileprivate init() {}
    }

    struct _IMUIFeatureView: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "IMUIFeatureView"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      fileprivate init() {}
    }

    struct _IMUIGalleryCell: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "IMUIGalleryCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> IMUIGalleryCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? IMUIGalleryCell
      }

      static func validate() throws {
        if UIKit.UIImage(named: "IMUIAssets.bundle/image/feature_gallery_select.png", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'IMUIAssets.bundle/image/feature_gallery_select.png' is used in nib 'IMUIGalleryCell', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    struct _IMUIGalleryContainerCell: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "IMUIGalleryContainerCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> IMUIGalleryContainerCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? IMUIGalleryContainerCell
      }

      fileprivate init() {}
    }

    struct _IMUIMessageCollectionView: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "IMUIMessageCollectionView"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      fileprivate init() {}
    }

    struct _IMUIPermissionDenyedView: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "IMUIPermissionDenyedView"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      fileprivate init() {}
    }

    struct _IMUIRecordVoiceCell: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "IMUIRecordVoiceCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> IMUIRecordVoiceCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? IMUIRecordVoiceCell
      }

      static func validate() throws {
        if UIKit.UIImage(named: "IMUIAssets.bundle/image/feature_pause_voice_btn.png", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'IMUIAssets.bundle/image/feature_pause_voice_btn.png' is used in nib 'IMUIRecordVoiceCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "IMUIAssets.bundle/image/feature_play_voive_btn.png", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'IMUIAssets.bundle/image/feature_play_voive_btn.png' is used in nib 'IMUIRecordVoiceCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "IMUIAssets.bundle/image/feature_record_voice_btn.png", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'IMUIAssets.bundle/image/feature_record_voice_btn.png' is used in nib 'IMUIRecordVoiceCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "IMUIAssets.bundle/image/feature_voice_delete_btn.png", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'IMUIAssets.bundle/image/feature_voice_delete_btn.png' is used in nib 'IMUIRecordVoiceCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "IMUIAssets.bundle/image/feature_voice_delete_btn_selected.png", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'IMUIAssets.bundle/image/feature_voice_delete_btn_selected.png' is used in nib 'IMUIRecordVoiceCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "IMUIAssets.bundle/image/feature_voice_play_btn.png", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'IMUIAssets.bundle/image/feature_voice_play_btn.png' is used in nib 'IMUIRecordVoiceCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "IMUIAssets.bundle/image/feature_voice_play_btn_seleted.png", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'IMUIAssets.bundle/image/feature_voice_play_btn_seleted.png' is used in nib 'IMUIRecordVoiceCell', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    fileprivate init() {}
  }
  #endif

  #if os(iOS) || os(tvOS)
  struct storyboard: Rswift.Validatable {
    static func validate() throws {
      #if os(iOS) || os(tvOS)
      try launchScreen.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try main.validate()
      #endif
    }

    #if os(iOS) || os(tvOS)
    struct launchScreen: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UIKit.UIViewController

      let bundle = R.hostingBundle
      let name = "LaunchScreen"

      static func validate() throws {
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct main: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = ViewController

      let bundle = R.hostingBundle
      let name = "Main"

      static func validate() throws {
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }
    #endif

    fileprivate init() {}
  }
  #endif

  fileprivate init() {}
}
